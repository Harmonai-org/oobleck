from __gin__ import dynamic_registration

from oobleck import blocks
from oobleck import models
from oobleck import losses
from oobleck import utils
from oobleck import discriminators

import auraloss

import torch
from torch import nn

# macros definition
CAPACITY = 32
RATIOS = [4, 4, 4, 2, 2]
DILATIONS = [1, 3, 9]
KERNEL_SIZE = 3
DATA_SIZE = 1
LATENT_SIZE = 128

# AudioAutoEncoder definition
models.AudioAutoEncoder:
    encoder = @encoder/models.SimpleTensorDictWrapper
    decoder = @decoder/models.SimpleTensorDictWrapper
    discriminator = @discriminators.MultiDiscriminator
    loss_module = @losses.CombineLosses

# encoder / decoder wrapper definition
encoder/models.SimpleTensorDictWrapper:
    input_key = "waveform"
    output_key = "latent"
    model = @blocks.DilatedResidualEncoder

decoder/models.SimpleTensorDictWrapper:
    input_key = "latent"
    output_key = "reconstruction"
    model = @blocks.DilatedResidualDecoder

# encoder definition
blocks.DilatedResidualEncoder:
    capacity = %CAPACITY
    dilated_unit = @blocks.DilatedConvolutionalUnit
    downsampling_unit = @blocks.DownsamplingUnit
    ratios = %RATIOS
    dilations = %DILATIONS
    pre_network_conv = @encoder/pre_conv/nn.Conv1d
    post_network_conv = @encoder/post_conv/nn.Conv1d
    normalization = @nn.utils.weight_norm

blocks.DilatedConvolutionalUnit:
    kernel_size = %KERNEL_SIZE
    activation = @nn.SiLU
    normalization = @nn.utils.weight_norm

blocks.DownsamplingUnit:
    activation = @nn.SiLU
    normalization = @nn.utils.weight_norm

encoder/pre_conv/nn.Conv1d:
    in_channels = %DATA_SIZE
    kernel_size = 5
    padding = 2

encoder/post_conv/nn.Conv1d:
    out_channels = @utils.encoder_out_size()
    kernel_size = 1
    padding = 0

# decoder definition
blocks.DilatedResidualDecoder:
    capacity = %CAPACITY
    dilated_unit = @blocks.DilatedConvolutionalUnit
    upsampling_unit = @blocks.UpsamplingUnit
    ratios = %RATIOS
    dilations = %DILATIONS
    pre_network_conv = @decoder/pre_conv/nn.Conv1d
    post_network_conv = @decoder/post_conv/nn.Conv1d
    normalization = @nn.utils.weight_norm

blocks.UpsamplingUnit:
    activation = @nn.SiLU
    normalization = @nn.utils.weight_norm

decoder/pre_conv/nn.Conv1d:
    in_channels = %LATENT_SIZE
    kernel_size = 1
    padding = 0

utils.encoder_out_size:
    latent_size = %LATENT_SIZE
    mode = "ae"

decoder/post_conv/nn.Conv1d:
    out_channels = %DATA_SIZE
    kernel_size = 5
    padding = 2

# discriminator definition
discriminators.MultiDiscriminator:
    discriminator_list = [
        @discriminators.MultiScaleDiscriminator,
        @discriminators.MultiPeriodDiscriminator
    ]
    keys = ["waveform", "reconstruction"]

discriminators.MultiScaleDiscriminator:
    n_scales = 3
    convnet = @scale/discriminators.SharedDiscriminatorConvNet

discriminators.MultiPeriodDiscriminator:
    periods = [2, 3, 5, 7, 11]
    convnet = @period/discriminators.SharedDiscriminatorConvNet

discriminators.SharedDiscriminatorConvNet:
    in_size = 1
    out_size = 1
    capacity = %CAPACITY
    n_layers = 4
    kernel_size = 15
    stride= 4
    activation = @nn.SiLU
    normalization = @nn.utils.weight_norm

scale/discriminators.SharedDiscriminatorConvNet:
    convolution = @nn.Conv1d

period/discriminators.SharedDiscriminatorConvNet:
    convolution = @nn.Conv2d

# loss definition
losses.CombineLosses:
    loss_modules = [
        @multiscale_stft/losses.AuralossWrapper,
        @losses.HingeGan,
    ]

multiscale_stft/losses.AuralossWrapper:
    input_key = "waveform"
    output_key = "reconstruction"
    auraloss_module = @auraloss.freq.MultiResolutionSTFTLoss

losses.HingeGan:
    real_key = "waveform"
    fake_key = "reconstruction"